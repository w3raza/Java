Klasa String:

Definiowanie:

I sposób:
String napis1 = "Java";
String napis2 = "Java";
//kompilator zuważa, że znowu def. Stringa o tej samej zawartości i nie ma zamairu rezerwować kolejnego miejsca w pamięci, w której będzie siedziała taka sama zawartość i dlatego zmienna napisa2 będzie wskazywała na to samo co zienna napis1

II sposób:
String napis1 = new String("Java");
String napis2 = new String("Java"); 
//new sprawi że jednej zmiennej i drugiej będą przydzielone osobne miejsca w pamięci mimo tego, że będą w nich zapisane te same wartości

== użwyamy tylko dla typów prostych
equals() dla klas

opertaor kropka oznacza dostęp do obiektu

equals()
length()
startsWith(ciag) - czy string zaczyna się określony ciągiem znakow
endsWith(ciag)
charAt(index)

obj.toString() Każdy obiekt posiada metodę toString, która jest wywoływana automatycznie, kiedy obiekt ma zostać przedstawiony jako wartość tekstowa, albo kiedy obiekt jest dołączany do ciągu znakowego.

Programowanie funkcyjne:
1. Nasze klasy powinny być immutable czyli dajemy final (nie będzie więc dziedziczenia)
2. Pola składowe klasy są inicjalizowane w kostruktorze
3. Nie tworzymy seterów
4. Aby przeczytać wartości pól składowych tworzymy getery.
5. Metody są czyste. Nie modyfikują stanów innych obiektów.
6. Jeśli modyfikujemy jednak obiekt, to zwracamy już inny obiekt, czyli jego kopię.
7. Unikamu nulli. Lepiej zwrócić obiekt klasy Optional<Klasa> niż null.
8. Metody są tak samo ważne jak klasy

Modyfikatory dostępu: public, protected, private

public class Pen {
    protected String color;

    public Pen(String color) {
        this.color = color;
    }
}
public class BallPen extends Pen{
protected String manufacturer;

    public BallPen(String color, String manufacturer) {
        super(color);
        this.manufacturer = manufacturer;
    }

    @Override
    public String toString() {
        return manufacturer + " " + color;
    }
}

super(parametry) //Służy ona do wywoływania konstruktorów klasy nadrzędnej